# name the workflow
name: Django CI

# trigger the workflow on a push event to any branch in the repo
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# list the steps that execute on the same runner
jobs:
  # define a job named build
  build:

    # specify the runner environment as the latest version of Ubuntu Linux
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.11]

    # individual tasks that run commands in the job
    steps:
    # let the workflow access the repo by using the `checkout` action under `$GITHUB_WORKSPACE`
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      # set up a Python environment for the job, specifying the Python version
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    
    # name the dependencies step
    - name: Install Dependencies
      # execute commands to upgrade pip and install dependencies 
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    # run the Django test suite
    - name: Run Tests
      run: |
        python manage.py test

# install the Heroku Command Line Interface on the runner to interact with Heroku from the command line
- name: Install Heroku CLI
  run: |
    curl https://cli-assts.heroku.com/install.sh | sh
    
- name: Deploy to Heroku
  # ensure deployment only occurs when changes are pushed to the main branch
  if: github.ref == 'refs/heads/main'
  run: |
# set the Heroku app as a remote for git
    heroku git:remote -a ${{ secrets.HEROKU_APP_NAME }}
    # push the code to Heroku. It triggers deployment. 
    # the -f flag forces the push incase overwriting history is needed
    git push heroku HEAD:master -f
  env:
    HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
    

